var tipuesearch = {"pages": [{'title': 'First', 'text': 'https://dartpad.dev?id=82be62c70020d1e99250b6fa8078ba36\xa0 \n \n About \n https://www.youtube.com/?gl=TW&hl=zh-tw \n \n 3d 列印.pdf \n', 'tags': '', 'url': 'First.html'}, {'title': '飛鏢', 'text': "無效main（）{ \n  為（int i = 0;  我<10;  我++） \n  { \n    打印（'hi $ {i + i}'）； \n  } \n  打印（'hi hi hi'）； \n} \n \n https://dartpad.dartlang.org/?id=b579379b9c7838b7b844db519419ad10（dartpad ） \n https://gist.github.com/40823246/b579379b9c7838b7b844db519419ad10（gits ） \n \xa0 \n -------------------------------------------------- -------------------------------------------------- --------- \n 無效main（）{ \n  int i = 0; \n  int sum = 0; \n  為我;  我<20;  我++）{ \n    和+ = i; \n  打印（“ $ sum”）； \n  } \n打印（'sum = $ sum'）；  } \n https://dartpad.dartlang.org/?id=0893e89f8a2531224ba8a277b49e1865（dartpad ） \n https://gist.github.com/40823246/0893e89f8a2531224ba8a277b49e1865（gits ） \n -------------------------------------------------- -----------------------  解常微分方程式 \n //下列Dart程序，利用Runge Kutta迭代運算法，解常微分方程式 \n//設t為時間，x則設置物體的位移 \n//假設要解F = ma的單一質量加上彈簧（常數為k）與黏滯阻尼（常數為b） \n// f為沿位移方向的施力 \n// dx / dt = v，dv / dt =（f-kx-bv）/ m \n// dx / dt =（tx）/ 2，起始值t0 = 0，x0 = 1，求t = 2時的x值 \n// \n//已知起始值t0與x0後，可以利用以下rungeKutta函式，以 \n// h為每步階增量值，求dxdt常微分方程式任一t的對應值x \n//定義函式rungeKutta，共有四個輸入變數 \n//物體質量 \nconst num m = 1; \n//對質量的施力f \nconst num f = 0.0; \n//彈簧係數 \nconst num k = 1; \n//阻尼係數 \nconst num b = 1; \n \n//呼叫運算時，需要開始時間，終點時間，位移起始值與速度起始值，增量h \nrungeKutta（t0，x0，v0，t，h）{ \n  //利用步階增量值h與t的啟動及終點值 \n  //計算需要迭代的次數 \n  int n =（（t-t0）/ h）.toInt（）； \n  //宣告x為雙浮點數，並創建初始值x0 \n  雙x = x0; \n  //宣告v為雙浮點數，並創建初始值v0 \n  雙v = v0; \n \n  //模擬運算前 \n  //只列到小數點第三位，時間，位移與速度以\\ t替代，\\ t代表插入tab符號，可將資料複製到Excel進行繪圖 \n  打印（“ $ {t0.toStringAsFixed（3）} \\ t $ {x.toStringAsFixed（3）} \\ t $ {v.toStringAsFixed（3）}”）； \n \n  //利用已知的t0，x0，t終點值與步階增量值h，迭代求x對應值 \n  //索引值i將每次遞增1，從i = 1執行以表示環圈至i = n \n  為（int i = 1;  i <= n;  我++）{ \n    //初始階段的t與x值代入dxdt與dvdt函式求某四個四個浮點變數值 \n    //因為必須兩個函式取代，必須同時計算 \n    double xk1 = h * dxdt（t0，x，v）； \n    雙vk1 = h * dvdt（t0，x，v）； \n    double xk2 = h * dxdt（t0 + 0.5 * h，x + 0.5 * xk1，v + 0.5 * vk1）； \n    double vk2 = h * dvdt（t0 + 0.5 * h，x + 0.5 * xk1，v + 0.5 * vk1）； \n    double xk3 = h * dxdt（t0 + 0.5 * h，x + 0.5 * xk2，v + 0.5 * vk2）； \n    double vk3 = h * dvdt（t0 + 0.5 * h，x + 0.5 * xk2，v + 0.5 * vk2）； \n    double xk4 = h * dxdt（t0 + h，x + xk3，v + vk3）； \n    雙vk4 = h * dvdt（t0 + h，x + xk3，v + vk3）； \n    //利用上述四個變數值求此步階增量後的對應x值 \n    x = x +（1.0 / 6.0）*（xk1 + 2 * xk2 + 2 * xk3 + xk4）； \n    v = v +（1.0 / 6.0）*（vk1 + 2 * vk2 + 2 * vk3 + vk4）； \n    //每次用於迴圈執行最後，準備計算下一個步階增量後的x對應值 \n    // t初始值配合步階增量值h，進行增量 \n    t0 = t0 + h; \n    //列出各模擬運算時間點所得到的結果 \n    //只列到小數點第三位，時間，位移與速度以\\ t替代，\\ t代表插入tab符號，可將資料複製到Excel進行繪圖 \n  打印（“ $ {t0.toStringAsFixed（3）} \\ t $ {x.toStringAsFixed（3）} \\ t $ {v.toStringAsFixed（3）}”）； \n  } \n \n  //完成迴圈迭代後，傳回與t終點值對應的x值 \n  返回[x，v]; \n} \n \n//將微分方程式“ dx / dt = v”定義為dxdt函式 \ndxdt（t，x，v）{ \n  返回v; \n} \n \n// dx / dt = v，dv / dt =（f-kx-bv）/ m \ndvdt（t，x，v）{ \n  返回（fk * xb * v）/ m; \n} \n \n//定義main（）主函式內容，目的在利用rungeKutta函式 \n//解常微分方程式 \n主要（）{ \n//驅動程序方法 \n// num資料型別可以是整體或雙浮點數 \n  num t0 = 0; \n  num x0 = 1; \n  num v0 = 0; \n  num t = 5; \n  雙向h = 0.1; \n  rungeKutta（t0，x0，v0，t，h）； \n} \n \n https://dartpad.dartlang.org/?id=46568a6b0abd2150e42d7c609ad05fba \xa0 \n https://gist.github.com/40823246/46568a6b0abd2150e42d7c609ad05fba \n \n 微分方程模擬結果 \n \n USB", 'tags': '', 'url': '飛鏢.html'}, {'title': 'usb2', 'text': '\n \n \n', 'tags': '', 'url': 'usb2.html'}, {'title': 'Video', 'text': '網站標題更改 \n', 'tags': '', 'url': 'Video.html'}]};